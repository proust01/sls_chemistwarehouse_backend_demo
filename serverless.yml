
service: sls-chemistwarehouse-backend-demo

frameworkVersion: '3'

plugins:
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: ap-southeast-2
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}"


functions:
  add-product:
    handler: api/add-product.add
    description: POST /progress
    events:
      - http:
          path: product
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-products:
    handler: api/get-products.get
    description: GET /products
    events:
      - http:
          path: products
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-product:
    handler: api/get-product.get
    description: GET /product
    events:
      - http:
          path: product/n/{product_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  update-product:
    handler: api/update-product.update
    description: PUT /product
    events:
      - http:
          path: product/n/{product_id}
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  delete-product:
    handler: api/delete-product.delete
    description: DELETE /product
    events:
      - http:
          path: product/n/{product_id}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}


resources:
  Resources:
    ProgressTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1